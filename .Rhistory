str(data)
str(data@Meals)
str(data$meals)
data.frame(data)
setwd("~/Documents/GitHub/Project")
# Load library
# First time you need to install "readxl": install.packages("readxl")
library(readxl)
# Import initial survey responses from 2_15_13
temp = tempfile(fileext = '.xlsx') #extension for Excel files
dataURL <- "https://github.com/lrsulli/Project/raw/master/Data/fp_survey_2_15_13.xlsx" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_initial = read_excel(temp, sheet = 1) #get data
# Load library
library(readxl)
# Recode file for Q12 and Q22 to Q25
temp = tempfile(fileext = '.xlsx') #extension for Excel fie
dataURL <- "https://github.com/lrsulli/Project/raw/master/Data/recode_Q12_Q22toQ25.xlsx" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_recode = read_excel(temp, sheet = 1) #get data
# Load library
library(readxl)
# Address list data file
temp = tempfile(fileext = '.xlsx') #extension for Excel fie
dataURL <- "https://github.com/lrsulli/Project/raw/master/Data/address_list_5_20_13.xlsx" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_address = read_excel(temp, sheet = 1) #get data
# Prepare recode file
names(data_recode) #Check names and see what the identifyer variable is called
# We don't need all of these varaibles so we will only keep the necessary ones:
data_recode = data_recode[,c(1,5:6,14:15,19:20)] #only keep necessary variables
# Rename the identifyer variable so it matches the initial data set to keep things simplier:
names(data_recode)[1] <- "STUDYID" #rename to match initial data set
# Merge recode file with initial data set
data = merge(data_initial, data_recode, by="STUDYID")
# Prepare address list file
names(data_address)[1] <- "STUDYID" #rename to match inital data set
# Merge address list with initial data set and recodes
data = merge(data, data_address, by="STUDYID")
data = data.frame(data) #convert to data frame
# Load library
# Make sure this package is installed the first time you run the code
library(readstata13)
# Import first of three census data files
temp = tempfile(fileext = '.dta') #extension for Stata data file
dataURL <- "https://github.com/lrsulli/Project/raw/master/Population_Data%204_7_17.dta" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_census1 = read.dta13(temp) #get data
# Load library
library(readstata13)
# Import second of three census data files
temp = tempfile(fileext = '.dta') #extension for Stata data file
dataURL <- "https://github.com/lrsulli/Project/raw/master/Census_Data%204_28_17.dta" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_census2 = read.dta13(temp) #get data
# Load library
library(readstata13)
# Import third of three census data files
temp = tempfile(fileext = '.dta') #extension for Stata data file
dataURL<-"https://github.com/lrsulli/Project/raw/master/tract10detroit_povertypop_123mile.dta" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_census3 = read.dta13(temp) #get data
# Merge first two census data files (Census1 and Census2)
data_census = merge(data_census1, data_census2, by="tr10fips", all=T) #keep all tracts
# Merge third census data file (Census3 with Census1 and Census2)
data_census = merge(data_census, data_census3, by="tr10fips", all=T) #keep all tracts
data_census = data.frame(data_census) #convert to data frame
# Merge Census data and survey data
data = merge(data, data_census, by='STUDYID') #only keep tracts that have organizations
data = data.frame(data) #convert to data frame
# Create a copy of original data set
data_copy = data
# Only keep necessary variables
data = data_copy[,c('tr10fips','STUDYID','Q5','Q6_1','Q6_2','Q6_3','Q6_4','Q6_5','Q7','Q8_1','Q8_2','Q8_3','Q8_4','Q8_5','Q8_6','Q8_7','Q8_8','Q9','Q10_1','Q10_2','Q10_3','Q10_4','Q10_5','Q14','Q15_1','Q15_2','Q15_3','Q15_4','Q15_5','Q15_6','Q15_7','Q15_8','Q15_9','Q15_10','Q15_11','Q15_12','Q15_13','Q12RC','Street.Address','City','State','Zip','County','povpop10071','povpopd71','povpop_1m',"povpopd711mile","povpop_3m","povpopd713mile","nhwht71","pop71","nhwht711mile","nhwht713mile","blk71","blk711mile","blk713mile","hsp71","hsp711mile","hsp713mile","hhsnapfam271","hhsnapfam171","hhsnapfam2711mile","hh711mile","hhsnapfam2713mile","hh713mile")]
# Check variable names of data
names(data)
# Rename identification variables
names(data)[1] <- "tract"
names(data)[2] <- "id"
# Rename types of meal programs
names(data)[3] <- "meals"
names(data)[4] <- "hot_meals"
names(data)[5] <- "home_meals" #Home delivered meals
names(data)[6] <- "community_kitchen"
names(data)[7] <- "child_meals"
names(data)[8] <- "meal_other" #Offer other types of meal programs
# Rename types of grocery programs
names(data)[9] <- "groceries"
names(data)[10] <- "pantry"
names(data)[11] <- "backpack"
names(data)[12] <- "home_groceries" #Home delivered groceries
names(data)[13] <- "mobile_pantry"
names(data)[14] <- "mobile_market"
names(data)[15] <- "supply_other" #Supply food to other programs
names(data)[16] <- "community_garden"
names(data)[17] <- "groceries_other" #Offer other types of grocery programs
# Rename types of food related benefit programs
names(data)[18] <- "food_ben" #Offers food-related benefits
names(data)[19] <- "snap"
names(data)[20] <- "wic"
names(data)[21] <- "school" #School lunch or breakfast
names(data)[22] <- "gift" #Gift card or voucher
names(data)[23] <- "food_ben_other" #Offer other types of food-related benefits
# Rename types of non-food related benefit programs
names(data)[24] <- "nonfood_ben" #Offers non-food related benefits
names(data)[25] <- "job" #Job training or assistance
names(data)[26] <- "house" #Housing assistance
names(data)[27] <- "utility"
names(data)[28] <- "legal"
names(data)[29] <- "educ" #GED or education assistance
names(data)[30] <- "health"
names(data)[31] <- "counseling"
names(data)[32] <- "trans" #Transportation assistance
names(data)[33] <- "cloth" #Clothing or furniture
names(data)[34] <- "ref" #Referrals to other programs
names(data)[35] <- "medicaid" #Medicaid or CHIP
names(data)[36] <- "money" #Financial, tax prep, budgeting
names(data)[37] <- "nonfood_ben_other" #Offer other types of non-food related benefits
# Rename number of clients served per month
names(data)[38] <- "clients"
# Load library
# Make sure this package is installed the first time you run the code
library(dplyr)
# Check for missing poverty demographic variables
sum(is.na(data_census$povpop10071)) #there are 962 missing values
# Will use poverty rate within 1 mile for missing within tract poverty rates
data_census$povpop10071[is.na(data_census$povpop10071)] <- 0 #Convert NA's to 0's
data_census <- mutate(data_census, pov_rateT = ifelse(povpop10071==0, povpop100711mile / povpopd711mile, povpop10071 / povpopd71)) #Replace missing values with the correct rate
# Generate poverty rate variables
data <- mutate(data, pov_rateT = povpop10071 / povpopd71) #Rate within census tract
data <- mutate(data, pov_rate1 = povpop_1m / povpopd711mile) #Rate within 1 mile
data <- mutate(data, pov_rate3 = povpop_3m / povpopd713mile) #Rate within 3 miles
# Generate White demographic variables
data <- mutate(data, white_rateT = nhwht71 / pop71) #Rate within census tract
data <- mutate(data, white_rate1 = nhwht711mile / povpopd711mile) #Rate within 1 mile
data <- mutate(data, white_rate3 = nhwht713mile / povpopd713mile) #Rate within 3 miles
# Gnerate Black demographic variables
data <- mutate(data, black_rateT = blk71 / pop71) #Rate within census tract
data <- mutate(data, black_rate1 = blk711mile / povpopd711mile) #Rate within 1 mile
data <- mutate(data, black_rate3 = blk713mile / povpopd713mile) #Rate within 3 miles
# Generate Hispanic demographic variables
data <- mutate(data, hisp_rateT = hsp71 / pop71) #Rate within census tract
data <- mutate(data, hisp_rate1 = hsp711mile / povpopd711mile) #Rate within 1 mile
data <- mutate(data, hisp_rate3 = hsp713mile / povpopd713mile) #Rate within 3 miles
# Generate SNAP rates
data <- mutate(data, snap_rateT = hhsnapfam271 / hhsnapfam171) #Rate within census tract
data <- mutate(data, snap_rate1 = hhsnapfam2711mile / hh711mile) #Rate within 1 mile
data <- mutate(data, snap_rate3 = hhsnapfam2713mile / hh713mile) #Rate within 3 miles
# Need county FIPS variable to focus analysis on Detroit metro area
# We will create this variable in both our main data frame and the complete census data
# Prepare to split census tract identifyer
# Identify the variable types
str(data$tract)
str(data_census$tr10fips)
# They are both character variables so we can continue with the subtr() function
# Create variable with the county and tract fips number by removing the state FIPS number (first 2 digits))
data <- mutate(data, tract_short = substr(tract, 3, 11)) #keep the 3rd through 11th digits
data_census <- mutate(data_census, tract_short = substr(tr10fips, 3, 11)) #keep the 3rd through 11th digits
# Create county FIPS code variable
data <- mutate(data, county_fips = substr(tract, 3, 5)) #keep the 3rd through 5th digits
data_census <- mutate(data_census, county_fips = substr(tr10fips, 3, 5)) #keep the 3rd through 5th digits
# Save a copy of the data in csv format
write.csv(map_address, "geocoded_addresses.csv") #saved to Github repo
# Save a copy of the data in csv format
write.csv(data, "data.csv") #saved to Github repo
library(stargazer)
stargazer(data,title = "Mean and Spread values", label = "measures")
library(stargazer)
stargazer(data$meals,title = "Mean and Spread values", label = "measures")
library(stargazer)
stargazer(data[,-c(3:37)],title = "Mean and Spread values", label = "measures")
library(stargazer)
stargazer(data$meals,title = "Mean and Spread values", label = "measures")
View(data)
# Only need counties where pantries are located (Detroit metro area)
# Keep Wayne, Macomb, Oakland, and Washtenaw Counties (FIPS = 163, 099, 125, and 161)
map_counties = subset(tractMap, CNTY_CODE=='163' | CNTY_CODE=='099' | CNTY_CODE=='125' | CNTY_CODE=='161')
# Load library
# First time you need to install "readxl": install.packages("readxl")
library(readxl)
# Import initial survey responses from 2_15_13
temp = tempfile(fileext = '.xlsx') #extension for Excel files
dataURL <- "https://github.com/lrsulli/Project/raw/master/Data/fp_survey_2_15_13.xlsx" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_initial = read_excel(temp, sheet = 1) #get data
# Load library
library(readxl)
# Recode file for Q12 and Q22 to Q25
temp = tempfile(fileext = '.xlsx') #extension for Excel fie
dataURL <- "https://github.com/lrsulli/Project/raw/master/Data/recode_Q12_Q22toQ25.xlsx" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_recode = read_excel(temp, sheet = 1) #get data
# Load library
library(readxl)
# Address list data file
temp = tempfile(fileext = '.xlsx') #extension for Excel fie
dataURL <- "https://github.com/lrsulli/Project/raw/master/Data/address_list_5_20_13.xlsx" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_address = read_excel(temp, sheet = 1) #get data
# Prepare recode file
names(data_recode) #Check names and see what the identifyer variable is called
# We don't need all of these varaibles so we will only keep the necessary ones:
data_recode = data_recode[,c(1,5:6,14:15,19:20)] #only keep necessary variables
# Rename the identifyer variable so it matches the initial data set to keep things simplier:
names(data_recode)[1] <- "STUDYID" #rename to match initial data set
# Merge recode file with initial data set
data = merge(data_initial, data_recode, by="STUDYID")
# Prepare address list file
names(data_address)[1] <- "STUDYID" #rename to match inital data set
# Merge address list with initial data set and recodes
data = merge(data, data_address, by="STUDYID")
data = data.frame(data) #convert to data frame
# Load library
# Make sure this package is installed the first time you run the code
library(readstata13)
# Import first of three census data files
temp = tempfile(fileext = '.dta') #extension for Stata data file
dataURL <- "https://github.com/lrsulli/Project/raw/master/Population_Data%204_7_17.dta" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_census1 = read.dta13(temp) #get data
# Load library
library(readstata13)
# Import second of three census data files
temp = tempfile(fileext = '.dta') #extension for Stata data file
dataURL <- "https://github.com/lrsulli/Project/raw/master/Census_Data%204_28_17.dta" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_census2 = read.dta13(temp) #get data
# Load library
library(readstata13)
# Import third of three census data files
temp = tempfile(fileext = '.dta') #extension for Stata data file
dataURL<-"https://github.com/lrsulli/Project/raw/master/tract10detroit_povertypop_123mile.dta" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
data_census3 = read.dta13(temp) #get data
# Merge first two census data files (Census1 and Census2)
data_census = merge(data_census1, data_census2, by="tr10fips", all=T) #keep all tracts
# Merge third census data file (Census3 with Census1 and Census2)
data_census = merge(data_census, data_census3, by="tr10fips", all=T) #keep all tracts
data_census = data.frame(data_census) #convert to data frame
# Merge Census data and survey data
data = merge(data, data_census, by='STUDYID') #only keep tracts that have organizations
data = data.frame(data) #convert to data frame
# Create a copy of original data set
data_copy = data
# Only keep necessary variables
data = data_copy[,c('tr10fips','STUDYID','Q5','Q6_1','Q6_2','Q6_3','Q6_4','Q6_5','Q7','Q8_1','Q8_2','Q8_3','Q8_4','Q8_5','Q8_6','Q8_7','Q8_8','Q9','Q10_1','Q10_2','Q10_3','Q10_4','Q10_5','Q14','Q15_1','Q15_2','Q15_3','Q15_4','Q15_5','Q15_6','Q15_7','Q15_8','Q15_9','Q15_10','Q15_11','Q15_12','Q15_13','Q12RC','Street.Address','City','State','Zip','County','povpop10071','povpopd71','povpop_1m',"povpopd711mile","povpop_3m","povpopd713mile","nhwht71","pop71","nhwht711mile","nhwht713mile","blk71","blk711mile","blk713mile","hsp71","hsp711mile","hsp713mile","hhsnapfam271","hhsnapfam171","hhsnapfam2711mile","hh711mile","hhsnapfam2713mile","hh713mile")]
# Check variable names of data
names(data)
# Rename identification variables
names(data)[1] <- "tract"
names(data)[2] <- "id"
# Rename types of meal programs
names(data)[3] <- "meals"
names(data)[4] <- "hot_meals"
names(data)[5] <- "home_meals" #Home delivered meals
names(data)[6] <- "community_kitchen"
names(data)[7] <- "child_meals"
names(data)[8] <- "meal_other" #Offer other types of meal programs
# Rename types of grocery programs
names(data)[9] <- "groceries"
names(data)[10] <- "pantry"
names(data)[11] <- "backpack"
names(data)[12] <- "home_groceries" #Home delivered groceries
names(data)[13] <- "mobile_pantry"
names(data)[14] <- "mobile_market"
names(data)[15] <- "supply_other" #Supply food to other programs
names(data)[16] <- "community_garden"
names(data)[17] <- "groceries_other" #Offer other types of grocery programs
# Rename types of food related benefit programs
names(data)[18] <- "food_ben" #Offers food-related benefits
names(data)[19] <- "snap"
names(data)[20] <- "wic"
names(data)[21] <- "school" #School lunch or breakfast
names(data)[22] <- "gift" #Gift card or voucher
names(data)[23] <- "food_ben_other" #Offer other types of food-related benefits
# Rename types of non-food related benefit programs
names(data)[24] <- "nonfood_ben" #Offers non-food related benefits
names(data)[25] <- "job" #Job training or assistance
names(data)[26] <- "house" #Housing assistance
names(data)[27] <- "utility"
names(data)[28] <- "legal"
names(data)[29] <- "educ" #GED or education assistance
names(data)[30] <- "health"
names(data)[31] <- "counseling"
names(data)[32] <- "trans" #Transportation assistance
names(data)[33] <- "cloth" #Clothing or furniture
names(data)[34] <- "ref" #Referrals to other programs
names(data)[35] <- "medicaid" #Medicaid or CHIP
names(data)[36] <- "money" #Financial, tax prep, budgeting
names(data)[37] <- "nonfood_ben_other" #Offer other types of non-food related benefits
# Rename number of clients served per month
names(data)[38] <- "clients"
# Load library
# Make sure this package is installed the first time you run the code
library(dplyr)
# Check for missing poverty demographic variables
sum(is.na(data_census$povpop10071)) #there are 962 missing values
# Will use poverty rate within 1 mile for missing within tract poverty rates
data_census$povpop10071[is.na(data_census$povpop10071)] <- 0 #Convert NA's to 0's
data_census <- mutate(data_census, pov_rateT = ifelse(povpop10071==0, povpop100711mile / povpopd711mile, povpop10071 / povpopd71)) #Replace missing values with the correct rate
# Generate poverty rate variables
data <- mutate(data, pov_rateT = povpop10071 / povpopd71) #Rate within census tract
data <- mutate(data, pov_rate1 = povpop_1m / povpopd711mile) #Rate within 1 mile
data <- mutate(data, pov_rate3 = povpop_3m / povpopd713mile) #Rate within 3 miles
# Generate White demographic variables
data <- mutate(data, white_rateT = nhwht71 / pop71) #Rate within census tract
data <- mutate(data, white_rate1 = nhwht711mile / povpopd711mile) #Rate within 1 mile
data <- mutate(data, white_rate3 = nhwht713mile / povpopd713mile) #Rate within 3 miles
# Gnerate Black demographic variables
data <- mutate(data, black_rateT = blk71 / pop71) #Rate within census tract
data <- mutate(data, black_rate1 = blk711mile / povpopd711mile) #Rate within 1 mile
data <- mutate(data, black_rate3 = blk713mile / povpopd713mile) #Rate within 3 miles
# Generate Hispanic demographic variables
data <- mutate(data, hisp_rateT = hsp71 / pop71) #Rate within census tract
data <- mutate(data, hisp_rate1 = hsp711mile / povpopd711mile) #Rate within 1 mile
data <- mutate(data, hisp_rate3 = hsp713mile / povpopd713mile) #Rate within 3 miles
# Generate SNAP rates
data <- mutate(data, snap_rateT = hhsnapfam271 / hhsnapfam171) #Rate within census tract
data <- mutate(data, snap_rate1 = hhsnapfam2711mile / hh711mile) #Rate within 1 mile
data <- mutate(data, snap_rate3 = hhsnapfam2713mile / hh713mile) #Rate within 3 miles
# Need county FIPS variable to focus analysis on Detroit metro area
# We will create this variable in both our main data frame and the complete census data
# Prepare to split census tract identifyer
# Identify the variable types
str(data$tract)
str(data_census$tr10fips)
# They are both character variables so we can continue with the subtr() function
# Create variable with the county and tract fips number by removing the state FIPS number (first 2 digits))
data <- mutate(data, tract_short = substr(tract, 3, 11)) #keep the 3rd through 11th digits
data_census <- mutate(data_census, tract_short = substr(tr10fips, 3, 11)) #keep the 3rd through 11th digits
# Create county FIPS code variable
data <- mutate(data, county_fips = substr(tract, 3, 5)) #keep the 3rd through 5th digits
data_census <- mutate(data_census, county_fips = substr(tr10fips, 3, 5)) #keep the 3rd through 5th digits
# Save a copy of the data in csv format
write.csv(data, "data.csv") #saved to Github repo
# Load library
# Make sure this package is installed the first time you run the code
library(pander)
# Distribution of values
pander(table(data$meals), stlye = 'rmarkdown', caption = "Number of food pantries offering meal programs.")
# Load library
library(pander)
# Relative Frequencies
pander((prop.table(table(data$meals)))*100, stlye = 'rmarkdown', caption = "Percent of food pantries offering meal programs.", digits = 3)
# Load library
library(pander)
# Distribution of values
pander(table(data$groceries), stlye = 'rmarkdown', caption = "Number of food pantries offering grocery programs.")
# Load library
library(pander)
# Relative Frequencies
pander((prop.table(table(data$groceries)))*100, stlye = 'rmarkdown', caption = "Percent of food pantries offering grocery programs.", digits = 3)
# Load library
library(pander)
# Distribution of values
pander(table(data$food_ben), stlye = 'rmarkdown', caption = "Number of food pantries offering food-related benefits.")
# Load library
library(pander)
# Relative Frequencies
pander((prop.table(table(data$food_ben)))*100, stlye = 'rmarkdown', caption = "Percent of food pantries offering food-related benefits.", digits = 3)
# Load library
library(pander)
# Distribution of values
pander(table(data$nonfood_ben), stlye = 'rmarkdown', caption = "Number of food pantries offering non-food related benefits.")
# Load library
library(pander)
# Relative Frequencies
pander((prop.table(table(data$nonfood_ben)))*100, stlye = 'rmarkdown', caption = "Percent of food pantries offering non-food related benefits.", digits = 3)
# Load library
library(pander)
# Centrality
pander(summary(data$clients), style = 'rmarkdown', caption = "Average number of clients served per month.")
# Load library
# Make sure this package is installed the first time you run the code
library(ggplot2)
# Histogram
ggplot(data, aes(x=data$clients)) +
geom_histogram(color = "#1F3552", fill = "#4271AE") + #blue color
scale_x_log10() + #log of variable
scale_y_continuous() +
labs(title="Clients Served") + #title of plot
labs(x="Log of the Average Number of Clients Served per Month", y="Count") #x-axis label
# I found a shapefile of the state of Michigan broken up by census tract
# I saved these files in a compresses folder in Github
# Link to map
compressedMap= "https://github.com/lrsulli/Project/raw/master/map/2010_Census_Tracts_v17a.zip"
# Unzip compressed map folder
temp=tempfile()
download.file(compressedMap, temp)
unzip(temp)
# Determine which shapefiles are in folder
(maps = list.files(pattern = 'shp'))
# Load library
# Make sure this package is installed the first time you run the code
library(rgdal)
# Select the map
tractMap <- readOGR("2010_Census_Tracts_v17a.shp", stringsAsFactors=F)
names(tractMap) #check variable names
str(tractMap$LINK) #check LINK (FIPS code) variable type
# The census tract number is a character, but we need it in numeric form
# Change LINK (FIPS code) variable into an interger
tractMap$NAME=as.numeric(tractMap$LINK)
write.csv(map_counties, "map_counties.csv") #saved to Github repo
# Only need counties where pantries are located (Detroit metro area)
# Keep Wayne, Macomb, Oakland, and Washtenaw Counties (FIPS = 163, 099, 125, and 161)
map_counties = subset(tractMap, CNTY_CODE=='163' | CNTY_CODE=='099' | CNTY_CODE=='125' | CNTY_CODE=='161')
# We only need one observation per census tract
data_counties = data_census[!duplicated(data_census[c('tract_short')]),] #drop duplicate tracts
# Merge map data with census data
map_counties = merge(map_counties, data_counties, by.x='LINK', by.y='tract_short', all.x=F)
# Save a copy of the data in csv format
write.csv(map_counties, "map_counties.csv") #saved to Github repo
#Plot characteristics
legendText="Poverty Rate" #legend title
shrinkLegend=0.8 #legend size
title="Poverty Rate by Census Tract"
shrinkPoints=0.35 #point size
plot(map_counties, col = 'grey') #plot background map (tracts without pantries)
plot(map_counties, col = colorPallette, main=title,border='black',add=T) #plot poverty rates
# Check map to determine if correct counties selected
plot(map_counties, col='black')
temp = tempfile(fileext = '.csv') #extension for Excel file
dataURL <- "https://raw.githubusercontent.com/lrsulli/Project/master/geocoded_addresses.csv" #link to data
download.file(dataURL, destfile = temp, mode = 'wb') #temporarily download file
map_address = read.csv(temp, header = TRUE, sep = ",") #get data
# Redefine latitude and longitude variables
map_address$lat = as.character(map_address$lat)
map_address$lon = as.character(map_address$lon)
# Want to plot within tract poverty rate
varToPLot=map_counties$pov_rateT
# Load librarys
# Make sure these packages are installed the first time you run the code
library(RColorBrewer)
library(classInt)
# Number of intervals
numberOfClasses = 5
# Color pallete
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
#Plot characteristics
legendText="Poverty Rate" #legend title
shrinkLegend=0.8 #legend size
title="Poverty Rate by Census Tract"
shrinkPoints=0.35 #point size
plot(map_counties, col = 'grey') #plot background map (tracts without pantries)
plot(map_counties, col = colorPallette, main=title,border='black',add=T) #plot poverty rates
title(main=title)
legend('topright', #location of legend
fill = attr(colorPallette, "palette"),
cex = shrinkLegend,
bty = "n",
title=legendText,
legend = c("0% - 6%", "6% - 11%", "11% - 18%", "18% - 35%", "35% - 100%")) #legend text
points(map_address$lon, map_address$lat, col = "red", pch =19, cex = shrinkPoints) #add organization locations
# Save a copy of the image
pdf(filename="map.pdf")
# Save a copy of the image
pdf(filename="map.pdf")
# Save a copy of the image
pdf(file = "map.pdf")
#Plot characteristics
legendText="Poverty Rate" #legend title
shrinkLegend=0.8 #legend size
title="Poverty Rate by Census Tract"
shrinkPoints=0.35 #point size
plot(map_counties, col = 'grey') #plot background map (tracts without pantries)
plot(map_counties, col = colorPallette, main=title,border='black',add=T) #plot poverty rates
title(main=title)
legend('topright', #location of legend
fill = attr(colorPallette, "palette"),
cex = shrinkLegend,
bty = "n",
title=legendText,
legend = c("0% - 6%", "6% - 11%", "11% - 18%", "18% - 35%", "35% - 100%")) #legend text
points(map_address$lon, map_address$lat, col = "red", pch =19, cex = shrinkPoints) #add organization locations
dev.off()
# Save a copy of the image
pdf(file = "map.pdf")
#Plot characteristics
legendText="Poverty Rate" #legend title
shrinkLegend=0.8 #legend size
title="Poverty Rate by Census Tract"
shrinkPoints=0.35 #point size
plot(map_counties, col = 'grey') #plot background map (tracts without pantries)
plot(map_counties, col = colorPallette, main=title,border='black',add=T) #plot poverty rates
title(main=title)
legend('topright', #location of legend
fill = attr(colorPallette, "palette"),
cex = shrinkLegend,
bty = "n",
title=legendText,
legend = c("0% - 6%", "6% - 11%", "11% - 18%", "18% - 35%", "35% - 100%")) #legend text
points(map_address$lon, map_address$lat, col = "red", pch =19, cex = shrinkPoints) #add organization locations
#Plot characteristics
legendText="Poverty Rate" #legend title
shrinkLegend=0.8 #legend size
title="Poverty Rate by Census Tract"
shrinkPoints=0.35 #point size
plot(map_counties, col = 'grey') #plot background map (tracts without pantries)
plot(map_counties, col = colorPallette, main=title,border='black',add=T) #plot poverty rates
title(main=title)
legend('topright', #location of legend
fill = attr(colorPallette, "palette"),
cex = shrinkLegend,
bty = "n",
title=legendText,
legend = c("0% - 6%", "6% - 11%", "11% - 18%", "18% - 35%", "35% - 100%")) #legend text
points(map_address$lon, map_address$lat, col = "red", pch =19, cex = shrinkPoints) #add organization locations
