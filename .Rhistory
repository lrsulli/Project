students[!students&country %in% DangerousPlaces]
students[!students&country %in% DangerousPlaces,]
students[!students$country %in% DangeourousPlaces,]
students[!students$country %in% DangerousPlaces,]
students[students$ages>30 & students$country=='China',]$education
students[order(-students$ages),]
# Chunk 1: gettingData
states=read.csv("https://goo.gl/So48s5")
# Chunk 2: verifying
str(states)
# Chunk 3: meanspread
# notice "results=tex"
#install.packages("stargazer")
library(stargazer)
stargazer(states[,-c(1,8)],title = "Mean and Spread values", label = "measures")
# Chunk 4: location
# notice "fig=TRUE"
par(mfrow=c(1,3))
boxplot(states$satMean)
boxplot(states$satDemand)
boxplot(states$k12ExpenditurePupil)
# Chunk 5: tableCat2
tableF=data.frame(table(states$region),row.names = NULL)
names(tableF)=c("Region", 'Frequency')
stargazer(tableF,title = "Distribution of Region",
label = "table_region",rownames=FALSE,summary = FALSE)
# Chunk 6: model_1
reg1=lm(satMean~k12ExpenditurePupil, data = states)
summary(reg1)
# Chunk 7: model_2
reg2=lm(satMean~k12ExpenditurePupil+satDemand, data = states)
summary(reg2)
educationVec=c("Bach", "Bach", "Bach", "PhD","Master","Master","PhD","Bach")
namesVec=c("Qing", "Françoise", "Raúl", "Bjork","Jim", "Peter","Maria","Rosita")
agesVec=c(32,-33,28,30,21,3,21,190)
countryVec=c("China", "Senegal", "Spain", "Norway", "Peru", "Chile", "Venezuela","Singapur")
educationVec=c("Bach", "Bach", "Bach", "PhD","Master","Master","PhD","Bach")
agesVec<0
agesVec<0
students=data.frame(namesVec,agesVec,countryVec,educationVec)
students[students$agesVec>30]
students[students$agesVec>30]
students$agesVec>30
students
students[students$agesVec>30]
students[students$agesVec>30,]
students[students$agesVec>16 & students$agesVec<99,]
students[students$agesVec<16 & students$agesVec>99,]
students[students$agesVec<16 | students$agesVec>99,]
students=data.frame(names=namesVec,
ages=agesVec,
country=countryVec,
education=educationVec,
stringsAsFactors=F)
students
theData=students
guyAges=theData[,'ages']
guyAges
lowT=10
upT=80
for (value in guyAges){
if ((lowT<=value) & (value<=upT)){
print('reading a good value')
}else{
print(paste('here is a bad one:',value))
}
}
library(readxl)
temp = tempfile(fileext = ".xlsx")
dataURL <- "https://github.com/EvansDataScience/data/raw/master/wapubs.xlsx"
download.file(dataURL, destfile = temp, mode="wb")
school = read_excel(temp, sheet = 1)
head(school,12)
school = read_excel(temp, sheet = 1, skip = 11)
school = data.frame(school)
head(school)
str(school)
names(school)
table(school$Title.1.School.Wide.)
prop.table(table(school$Title.1.School.Wide.))
distribution=table(school$Title.1.School.Wide.)
chisq.test(distribution)
symbolsForNA=c("†")
school[-1]=lapply(school[-1],
function(x)
replace(x,x%in%symbolsForNA, NA))
table(school$Title.1.School.Wide.)
distribution=table(school$Title.1.School.Wide.)
chisq.test(distribution)
modeCount=max(distribution)
mode=distribution[distribution==modeCount]
names(mode)
getMode=function(aColumn){
freqTable=table(aColumn)
maxFrequency=max(freqTable)
names(freqTable[freqTable==maxFrequency])
}
table(school$Locale.)
school[school$Locale.=="N",]
school[1194,'Locale.']=NA
school$Locale.=as.factor(school$Locale.)
var=school$Locale.
getMode(var)
library(DescTools)
Gini(table(var))
chisq.test(table(var))
barplot(table(var),las=2)
tableVar=table(var)
colorMode=rep('gray',length(tableVar))
colorMode[7]='red'
shrinkfactor=0.6
barplot(table(var),las=2,col=colorMode,cex.names = shrinkfactor)
barplot(table(var),las=2,col=colorMode,cex.names = shrinkfactor,
main="Title of the plot",
xlab="Category",
ylab="Count of the levels")
library(ggplot2)
base=ggplot(school,aes(Locale.))
base + geom_bar(fill=colorMode)
head(snap)
snapCounties = snap[snap$County.FIPS.code!=0,]
temp = tempfile(fileext = ".xls")
dataURL <- "https://github.com/EvansDataScience/data/raw/master/cntysnap.xls"
download.file(dataURL, destfile=temp, mode='wb')
snap = read_excel(temp, sheet =1, skip = 2)
snap = data.frame(snap)
head(snap)
str(snap)
names(snap)
snapCounties = snap[snap$County.FIPS.code!=0,]
snap=snapCounties
head(snap)
snapLong <- reshape(snap,
varying = names(snap)[4:23],
v.names = "recipients",
times = str_extract(names(snap)[4:23], "\\d+"),
direction = "long")
library(stringr)
snapLong <- reshape(snap,
varying = names(snap)[4:23],
v.names = "recipients",
times = str_extract(names(snap)[4:23], "\\d+"),
direction = "long")
row.names(snapLong)=NULL
head(snapLong)
library(scales)
h1=ggplot(snapLong, aes(x = recipients))
h1 = h1 + geom_histogram(bins=50) + facet_wrap(~time,scales = "free_x")
h1 = h1 + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 5))
h1 = h1 + scale_x_continuous(labels = comma)
h1
bp <- ggplot(snapLong, aes(x = time, y = recipients)) + geom_boxplot()
bp + theme(axis.text.x = element_text(angle=90, hjust=1))
snap2013 = snapLong[snapLong$time=='2013',]
target=53
categories=names(tables(snap2013$State.FIPS.code))
snap2013 = snapLong[snapLong$time=='2013',]
target=53
categories=names(table(snap2013$State.FIPS.code))
cols=rep('red',length(categories))
i=0
for(cat in categories){
i=i+1
if (cat==target){
cols[i]='blue'
}
}
snap2013 = snapLong[snapLong$time=='2013',]
target=53
categories=names(table(snap2013$State.FIPS.code))
cols=rep('red',length(categories))
i=0
for(cat in categories){
i=i+1
if (cat==target){
cols[i]='blue'
}
}
bp = ggplot(snap2013, aes(x = as.factor(snap2013$State.FIPS.code), y = recipients)) + geom_boxplot(fill=cols,lwd=0.1,outlier.size = 1)
bp + theme(axis.text = element_text(angle=90, hjust=1))
temp = tempfile(fileext = ".xls")
dataURL <- "https://github.com/EvansDataScience/data/raw/master/est15ALL.xls"
download.file(dataURL, destfile = temp, mode = 'wb')
income=read_excel(temp,1,skip=3,na='.')[,c(1:4,23)]
income=as.data.frame(income)
names(income)
incomeCounties=income[income$'County FIPS Code'!='000',]
head(incomeCounties)
str(incomeCounties)
summary(incomeCounties$'Median Household Income')
sd(incomeCounties$'Median Household Income',na.rm = T)
sd(incomeCounties$'Medican Household Income',na.rm = T)/mean(incomeCounties$'Median Household Income',na.rm = T)
sd(incomeCounties$'Median Household Income',na.rm = T)/mean(incomeCounties$'Median Household Income',na.rm = T)
skewness(incomeCounties$'Median Household Income',na.rm = T)
library(moment)
library(moments)
skewness(incomeCounties$'Median Household Income',na.rm = T)
kurtosis(incomeCounties$'Median Household Income', na.rm = T)
data=incomeCounties[is.finite(incomeCounties$'Median Household Income'),]
var=data$'Median Household Income'
mnVar=mean(var,na.rm = T)
sdVar=sd(var,na.rm = T)
base = ggplot(data, aes(x=var))
hist = base + geom_histogram(fill='green',
color='grey',
aes(y=..density..))
histAndNormal = hist + stat_function(fun=dnorm,
color='red',
args=list(mean=mnVar,sd=sdVar))
histAndNormal
mdVar=median(var)
histAndNormal + geom_vline(aes(xintercept = mnVar,colour='mean'),
show.legend = TRUE) +
geom_vline(aes(xintercept = mdVar,colour='median'),
show.legend = TRUE) +
scale_color_manual(name = 'centrals',
values = c(median = 'blue', mean = 'red'))
waca=c('WA','CA')
countiesWACA=incomeCounties[incomeCounties$'Postal Code'%in% waca,]
data=countiesWACA
var=data$`Median Household Income`
group=data$`Postal Code`
ggplot(data, aes(x=var, fill=as.factor(group))) + geom_histogram()
snapCounties$July.2013=as.numeric(snapCounties$July.2013)
summary(snapCounties$July.2013)
(bp=boxplot(snapCounties$July.2013,horizontal = T))
bp$stats
(iqr=IQR(snapCounties$July.2013,na.rm = T))
q75=bp$stats[4]
(capHigh = q75 + iqr*1.5)
q25=bp$stats[2]
(capLow = q25 - iqr*1.5)
length(bp$out)
StdDev=sd(snapCounties$July.2013,na.rm = T)
Mean=mean(snapCounties$July.2013,na.rm = T)
(lowCapT=Mean-2*StdDev)
(upCapT=Mean+2*StdDev)
sum(snapCounties$July.2013>upCapT,na.rm = T)
(r=(upCapT-q75)/iqr)
bp=boxplot(snapCounties$July.2013,horizontal = T,range = r)
hist(snapCounties$July.2013)
hist(log(snapCounties$July.2013))
bplog=boxplot(log(snapCounties$July.2013),horizontal = T)
length(bplog$out)
install.packages("car")
library(car)
dataLog=log(snapCounties$July.2013)
low=bplog$stats[1]
up=bplog$stats[5]
snapCounties$out2013=ifelse(dataLog<low,1,ifelse(dataLog>up,2,0))
table(snapCounties$out2013)
head(snapCounties[c('Name','out2013')])
library(tidyr)
snapCounties=separate(data = snapCounties,
col = Name,
into = c('county', 'state'),
sep = '\\, ')
head(snapCounties)
table(snapCounties[c('state','out2013')])
normStates=na.omit(snapCounties$state[snapCounties$out2013==0])
upOutStates=na.omit(snapCounties$state[snapCounties$out2013==2])
lowOutStates=na.omit(snapCounties$state[snapCounties$out2013==1])
setdiff(upOutStates,lowOutStates)
library(XML)
library(RCurl)
wikiLink = "https://en.wikipedia.org/wiki/Democracy_Index"
wikiLinkContent = getURL(wikiLink)
wikiTables = readHTMLTable(wikiLinkContent,stringAsFactors=FALSE)
is.data.frame(wikiTables)
is.list(wikiTables)
length(wikiTables)
dem=wikiTables[[4]]
names(dem)
names(dem) = gsub('\n', ' ', names(dem))
names(dem) = gsub(' ', '_', names(dem))
str(dem)
dem[,c(1,3:8)]=lapply(dem[,c(1,3:8)],as.numeric)
dem$Category=as.factor(dem$Category)
levels(dem$Category)
levelCat = c("Authoritarian","Hybrid regime","Flawed democracy","Full democracy")
str(levelCat)
dem[,c(1,3:8)]=lapply(dem[,c(1,3:8)],as.numeric)
dem$Category=as.factor(dem$Category)
levels(dem$Category)
levelCat = c("Authoritarian","Hybrid regime","Flawed democracy","Full democracy")
dem$Category = factor(dem$Category,
levels = levelCat,
labels = levelCat, ordered = T)
dem$Category
levels(dem$Category)
dem[,c(1,3:8)]=lapply(dem[,c(1,3:8)],as.numeric)
dem$Category=as.factor(dem$Category)
levels(dem$Category)
levelCat = c("Authoritarian","Hybrid regime","Flawed democracy","Full democracy")
dem$Category = factor(dem$Category,
levels = levelCat,
labels = levelCat, ordered = T)
library(car)
scatterplotMatrix(dem[,c(4:8)], diagonal = 'histogram', reg.line = NULL, smoother = NULL)
length(dem$Country)==length(unique(dem$Country))
row.names(dem)=dem$Country
str(dem[,c(3:7)])
library(clsuter())
library(cluster)
demSim=daisy(dem[,c(3:7)], metric = 'euclidean',
stand = TRUE)
demSim
demClus = hclust(demSim, method = 'average')
plot(demClus, cex = 0.5)
plot(demClus, cex = 0.3)
rect.hclust(demClus, k =4, border = c('orange','blue','red','green'))
plot(demClus, cex = 0.3)
rect.hclust(demClus, k =4, border = c('orange','blue','red','green'))
plot(demClus, cex = 0.3)
rect.hclust(demClus, k =3, border = c('orange','blue','red'))
demSil4 = silhouette(cutree(demClus, k = 4), demSim)
clust4sol = data.frame(matrix(demSil4, ncol = 3, dimnames = dimnames(demSil4)))
clust4sol = data.frame(matrix(demSil4, ncol = 3, dimnames = dimnames(demSil4)))
row.names(clust4sol) = dem$Country
(bad4 = clust4sol[clust4sol$sil_width<0,])
demSil3 = silhouette(cutree(demClus, k = 3), demSim)
clust3sol = data.frame(matrix(demSil3, ncol = 3, dimnames = dimnames(demSil3)))
row.names(clust3sol) = dem$Country
(bad3 = clust3sol[clust3sol$sil_width<0,])
intersect(row.names(bad4), row.names(bad3))
solution = clust3sol
solution$Country = row.names(clust3sol)
row.names(solution) = NULL
demUpdated = merge(dem, solution)
scatterplot(demUpdated[,c(4:8)],
diagonal = 'histogram',
reg.line = NULL,
smoother = NULL,
groups = demUpdated$cluster,
col = palette,
legend.plot = F)
palette = c('blue','orange','red')
scatterplot(demUpdated[,c(4:8)],
diagonal = 'histogram',
reg.line = NULL,
smoother = NULL,
groups = demUpdated$cluster,
col = palette,
legend.plot = F)
scatterplotMatrix(demUpdated[,c(4:8)],
diagonal = 'histogram',
reg.line = NULL,
smoother = NULL,
groups = demUpdated$cluster,
col = palette,
legend.plot = F)
library(haven)
dataURL <- "https://github.com/EvansDataScience/data/raw/master/lapopUSA2017.dta"
lapop = data.frame(read_dta(data_URL))
library(haven)
dataURL <- "https://github.com/EvansDataScience/data/raw/master/lapopUSA2017.dta"
lapop = data.frame(read_dta(dataURL))
install.packages("curl")
library(haven)
dataURL <- "https://github.com/EvansDataScience/data/raw/master/lapopUSA2017.dta"
lapop = data.frame(read_dta(dataURL))
ncol(lapop)
gprep("^b", colnames(lapop))
grep("^b", colnames(lapop))
positions1=grep('^b', colnames(lapop))
names(lapop)[positions1]
positions2=grep('^ros|^media', colnames(lapop))
names(lapop)[positions2]
(positions=c(positions1,positions2))
summary(lapop[,positions])
lapop[,positions]=lapply(lapop[,positions],as.numeric)
boxplot(lapop[,positions],las=2)
for(aColumn in names(lapop[,positions])){
MEDIAN=median(lapop[,aColumn],na.rm=T)
lapop[is.na(lapop[,aColumn]),aColumn]=round(MEDIAN,0)
}
summary(lapop[,positions])
corMatrix=cor(scale(lapop[,positions]), method = 'spearman')
corMatrix
library(psych)
corMatrix=cor(scale(lapop[,positions]), method = 'spearman')
KMO(corMatrix)
cortest.bartlett(corMatrix, n=nrow(lapop))
eigenV=scree(corMatrix,factors=FALSE,pc=TRUE)
eigenV$pcv
cortest.bartlett(corMatrix, n=nrow(lapop))
eigenV=scree(corMatrix,factors=FALSE,pc=TRUE)
howManyPC=3
lapopPCA=principal(corMatrix,
nfactors=howManyPC,
n.obs = nrow(lapop),
rotate = 'none',
scores = TRUE)
print(lapopPCA, digits=3, cut = hideBelow)
hideBelow=0.4
print(lapopPCA, digits=3, cut = hideBelow)
lapopPCA$Vaccounted[3,howManyPC]*100
lapopPCA=principal(corMatrix,
nfactors=howManyPC,
n.obs = nrow(lapop),
rotate = 'none',
scores = TRUE)
hideBelow=0.4
print(lapopPCA, digits=3, cut = hideBelow)
lapopPCA$rms
lapopPCA$fit
boxplot(lapopPCA$communality, horizontal = T, main = 'Communalities')
boxplot(lapopPCA$uniquenesses, horizontal = T, main = 'Uniqueness')
boxplot(lapopPCA$complexity, horizontal = T)
PCAscores=factor.scores(lapop[,positions],lapopPCA)$scores
smallLapop=lapop[,positions]
smallLapop=cbind(smallLapop,PCAscores)
head(smallLapop)
library(readxl)
temp = tempfile(fileext= '.xlsx')
dataURL <- "https://github.com/lrsulli/GovAnalytics/tree/master/Data/fp_survey_2_15_13.xlsx"
download.file(dataURL, destfile = temp, mode = 'wb')
library(readxl)
temp = tempfile(fileext= '.xlsx')
dataURL <- "https://github.com/lrsulli/GovAnalytics/tree/master/Data/fp_survey_2_15_13.xlsx"
download.file(dataURL, destfile = temp, mode = 'wb')
data = read_excel(temp, sheet = 1)
library(readxl)
temp = tempfile(fileext = '.xlsx')
dataURL <- "https://github.com/lrsulli/GovAnalytics/tree/master/Data/fp_survey_2_15_13.xlsx"
download.file(dataURL, destfile = temp, mode = 'wb')
data = read_excel(temp, sheet = 1)
foodpantry = read_excel(temp, sheet = 1)
data = read_excel(temp)
temp = tempfile(fileext = '.xlsx')
dataURL <- "https://github.com/lrsulli/GovAnalytics/blob/master/Data/fp_survey_2_15_13.xlsx"
download.file(dataURL, destfile = temp, mode = 'wb')
data = read_excel(temp, sheet = 1)
library(readxl)
setwd("~/Documents/GitHub/Project")
library(readxl)
temp = tempfile(fileext = '.xlsx')
dataURL <- "https://github.com/lrsulli/GovAnalytics/raw/master/Data/fp_survey_2_15_13.xlsx"
download.file(dataURL, destfile = temp, mode = 'wb')
data_initial = read_excel(temp, sheet = 1)
head(data_initial,4)
temp = tempfile(fileext = '.xlsx')
dataURL <- "https://github.com/lrsulli/GovAnalytics/raw/master/Data/new%20responses%205_20_13-2.xlsx"
download.file(dataURL, destfile = temp, mode = 'wb')
temp = tempfile(fileext = '.xlsx')
dataURL <- "https://github.com/lrsulli/GovAnalytics/raw/master/Data/new responses 5_20_13-2.xlsx"
download.file(dataURL, destfile = temp, mode = 'wb')
temp = tempfile(fileext = '.xlsx')
dataURL <- "https://github.com/lrsulli/GovAnalytics/raw/master/Data/new_responses_5_20_13.xlsx"
download.file(dataURL, destfile = temp, mode = 'wb')
temp = tempfile(fileext = '.xlsx')
URL <- "https://github.com/lrsulli/GovAnalytics/raw/master/Data/new_responses_5_20_13.xlsx"
download.file(URL, destfile = temp, mode = 'wb')
temp = tempfile(fileext = '.xlsx')
dataURL <- "https://github.com/lrsulli/GovAnalytics/raw/master/Data/new_responses_5_20_13.xlsx"
download.file(dataURL, destfile = temp, mode = 'wb')
data_new = read_excel(temp, sheet = 1)
head(data_new,4)
append(data_initial, data_new)
temp = tempfile(fileext = '.xlsx')
dataURL <- "https://github.com/lrsulli/GovAnalytics/raw/master/Data/recode_Q12_Q22toQ25.xlsx"
download.file(dataURL, destfile = temp, mode = 'wb')
data_recode = read_excel(temp, sheet = 1)
head(data_recode,4)
temp = tempfile(fileext = '.xlsx')
dataURL <- "https://github.com/lrsulli/GovAnalytics/raw/master/Data/address_list_5_20_13.xlsx"
download.file(dataURL, destfile = temp, mode = 'wb')
data_address = read_excel(temp, sheet = 1)
head(data_address,4)
View(data_initial)
View(data_recode)
names(data_recode)
data_recode = data_recode[,c(1,5:6,14:15,19:20)]
head(data_recode,4)
colnames(data_recode$`ID Number`) = "STUDYID"
colnames(data_recode$`ID Number`) <- "STUDYID"
View(data_recode)
library(dplyr)
rename(data_recode, 'ID Number' = STUDYID)
rename(data_recode, 'ID Number' = 'STUDYID')
rename(data_recode, ID Number = 'STUDYID')
View(data_recode)
colnames(data_recode)
names(data_recode)[names(data_recode) == "ID Number"] <- "STUDYID"
head(data_recode,4)
names(data_recode)[names(data_recode) == "ID Number"] <- "X"
head(data_recode,4)
names(data_recode)[names(data_recode) == "STUDYID"] <- "X"
head(data_recode,4)
names(data_recode)[1] <- "STUDYID"
head(data_recode,4)
data = merge(data_initial, data_recode, by="STUDYID")
View(data_address)
names(data_address)[1] <- "STUDYID"
head(data_address,4)
data = merge(data, data_address, by="STUDYID")
names(data$STUDYID) <- ID
names(data$STUDYID) <- "ID"
View(data)
View(data)
names(data)
names(data)[17] <- "meals"
names(data)
names(data)[24] <- "groceries"
names(data)[34] <- "food_ben" #Offers food-related benefits
names(data)[56] <- "nonfood_ben" #OFfer non-food related benefits
names(data)[17] <- "meals"
names(data)
(data$Q12_TXT1)
(data$Q12RC)
names(data)
names(data)[187] <- "clients"
